package com.jtrent238.dangerzone.launcher;

//Usually you will require both swing and awt packages
//even if you are working with just swings.
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Paths;

class gui {
	
    private static JEditorPane editor;
    private static JScrollPane scroll;
    private static URL url;
    public static String title = "DangerZone Launcher - By: jtrent238";
	private static String URL = "https://dzarchive.jtrent238.tk";
	private static String dzpath = System.getenv("APPDATA") + "\\DangerZone";
	private static String dzprop = dzpath + "/" + "DangerZone.Properties";
	public static String playername = "Player";
	public static String playerpassword = "";
	public static String errstring = null;
	public static String crypted_password = null;
	
 public static void main(String args[]) throws IOException {

	 System.out.println("DangerZone Path: " + dzpath);
	 System.out.println(dzprop);
	 
	 File dzpathDir = new File(dzpath);
	 if (!dzpathDir.exists()){
		 dzpathDir.mkdirs();
	 }

	 File dzpropf = new File(dzprop);
	 if (!dzpropf.exists()){
		 dzpropf.createNewFile();
		 dzpropf.setWritable(true);
		 
		 try {
		      FileWriter myWriter = new FileWriter(dzprop);
		      myWriter.write("#DangerZoneProperties Generated by DangerZoneLauncher");
		      myWriter.close();
		      System.out.println("Successfully wrote to the file.");
		    } catch (IOException e) {
		      System.out.println("An error occurred.");
		      e.printStackTrace();
		    }
	 }
	 
	 
     //Creating the Frame
     JFrame frame = new JFrame(title);
     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     frame.setSize(1000, 600);

     //Creating the MenuBar and adding components
     JMenuBar mb = new JMenuBar();
     JMenu m1 = new JMenu("FILE");
     JMenu m2 = new JMenu("Help");
     mb.add(m1);
     mb.add(m2);
     JMenuItem m11 = new JMenuItem("Open");
     JMenuItem m22 = new JMenuItem("Save as");
     m1.add(m11);
     m1.add(m22);

     //set the url
     try {
         url = new URL(URL);
     }
     catch(MalformedURLException mue) {
         JOptionPane.showMessageDialog(null,mue);
     }
     
   //create the JEditorPane
     try {
         editor = new JEditorPane(URL);
         
         //set the editor pane to false.
         editor.setEditable(false);
     }
     catch(IOException ioe) {
         JOptionPane.showMessageDialog(null,ioe);
     }
     //Creating the panel at bottom and adding components
     JPanel panel = new JPanel(); // the panel is not visible in output
     JLabel labelUsername = new JLabel("Username:");
     JLabel labelPassword = new JLabel("Password:");
     JTextField textfieldUsername = new JTextField(10); // accepts upto 10 characters
     JTextField textfieldPassword = new JTextField(10); // accepts upto 10 characters
     JButton btnLogin = new JButton("Login");

     panel.add(labelUsername); // Components Added using Flow Layout
     panel.add(textfieldUsername);
     panel.add(labelPassword);
     panel.add(textfieldPassword);
     panel.add(btnLogin);

     // Text Area at the Center
     JTextArea ta = new JTextArea();
     //add scroll pane to jframe center

     //Adding Components to the frame.
     frame.getContentPane().add(BorderLayout.SOUTH, panel);
     frame.getContentPane().add(BorderLayout.NORTH, mb);
     //frame.getContentPane().add(BorderLayout.CENTER, editor);
     frame.setVisible(true);
     
     btnLogin.addActionListener(new ActionListener() {

    	    @Override
    	    public void actionPerformed(ActionEvent e) {
    	        //your actions
    	    	if(textfieldUsername.getText().length() < 4 || textfieldPassword.getText().length() < 4 ) {
    	    		errstring = "Invalid Username and Password";
    	    		JOptionPane.showMessageDialog(null, errstring, "InfoBox: " + title, JOptionPane.ERROR_MESSAGE);
    	    	} else {
    	    		playername = textfieldUsername.getText();
        	    	playerpassword = textfieldPassword.getText();
        	    	doCryptPassword();
        	    	System.out.println("Crypted Password: " + crypted_password);
        	        JOptionPane.showMessageDialog(null, "Loggedin as: " + playername, "InfoBox: " + title, JOptionPane.INFORMATION_MESSAGE);
        	    labelUsername.remove(labelUsername);
        	    labelPassword.remove(labelPassword);
        	    textfieldUsername.remove(textfieldUsername);
    	    	textfieldPassword.remove(textfieldPassword);
    	    	
    	    	}
    	    		
    	    }
    	});
 }
 
 public static void doCryptPassword() {
	    int namelen = playername.length();
	    int passlen = playerpassword.length();
	    String dzstring = "DangerZone is the best!";
	    int dzstlen = dzstring.length();
	    String hashbackstring = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	    int hashbacklen = hashbackstring.length();
	    int[] nameint = new int[32];
	    int[] passint = new int[32];
	    int[] dzstint = new int[32];
	    int[] cryptint = new int[32];
	    if (namelen < 4 || passlen < 4) {
	      errstring = "password encryption failure";
	      return;
	    } 
	    String tstring = playername.toLowerCase();
	    byte[] asbytes = tstring.getBytes();
	    int i;
	    for (i = 0; i < 32; i++)
	      nameint[i] = asbytes[i % namelen]; 
	    asbytes = playerpassword.getBytes();
	    for (i = 0; i < 32; i++)
	      passint[i] = asbytes[i % passlen]; 
	    asbytes = dzstring.getBytes();
	    for (i = 0; i < 32; i++)
	      dzstint[i] = asbytes[i % dzstlen]; 
	    for (i = 0; i < 32; i++) {
	      cryptint[i] = nameint[i] * passint[31 - i];
	      cryptint[i] = cryptint[i] / 8;
	      cryptint[i] = cryptint[i] * dzstint[i];
	      cryptint[i] = cryptint[i] / 4;
	      cryptint[i] = cryptint[i] + (nameint[i] ^ passint[i] ^ dzstint[i]);
	    } 
	    for (i = 0; i < 32; i++) {
	      cryptint[i] = cryptint[i] & 0xFFF;
	      int j = cryptint[i];
	      cryptint[i] = cryptint[cryptint[i] % 32];
	      cryptint[cryptint[i] % 32] = j;
	    } 
	    crypted_password = "";
	    for (i = 0; i < 32; i++)
	      crypted_password = String.valueOf(crypted_password) + hashbackstring.charAt(cryptint[i] % hashbacklen); 
	  }
 
}